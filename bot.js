const { Client, LocalAuth, Buttons } = require('whatsapp-web.js');
const axios = require('axios');
const fs = require('fs');

console.log('üöÄ Iniciando el bot de WhatsApp...');

// üîπ Elimina la sesi√≥n anterior si existe
const sessionPath = './.wwebjs_auth/session';
if (fs.existsSync(sessionPath)) {
    console.log('üóëÔ∏è Eliminando sesi√≥n anterior para evitar bloqueos...');
    fs.rmSync(sessionPath, { recursive: true, force: true });
}

console.log('üîÑ Inicializando el cliente de WhatsApp...');

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        headless: false,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-extensions',
            '--disable-dev-shm-usage'
        ]
    }
});

client.on('qr', qr => {
    console.log('üì∑ Escanea el c√≥digo QR con tu WhatsApp:');
    console.log(qr);
});

client.on('ready', () => {
    console.log('‚úÖ Cliente de WhatsApp est√° listo!');
});

client.on('message', async message => {
    try {
        console.log(`üì© Mensaje recibido de ${message.from}: ${message.body}`);

        // üîπ Responder solo a un n√∫mero espec√≠fico
        const numeroAutorizado = '51992198356@c.us'; // Formato de WhatsApp sin "+" y con "c.us"
        if (message.from !== numeroAutorizado) {
            console.log('‚õî Mensaje ignorado, no es del n√∫mero autorizado.');
            return;
        }

        if (message.isGroupMsg) return;

        if (message.body === '!start') {
            await sendWelcomeMenu(message);
        } else {
            await handleMenuOptions(message);
        }
    } catch (error) {
        console.error("‚ùå Error en la gesti√≥n del mensaje:", error);
    }
});

// üîπ Obtener los datos del chat desde la API
async function getChatData() {
    try {
        console.log('üåê Obteniendo datos del chat...');
        const response = await axios.get('http://localhost:5001/api/chat');
        return response.data;
    } catch (error) {
        console.error('‚ùå Error al obtener datos del chat:', error.message);
        return null;
    }
}

// üîπ Enviar el men√∫ de bienvenida con botones
async function sendWelcomeMenu(message) {
    const chatData = await getChatData();
    if (!chatData) {
        console.log('‚ö†Ô∏è No se pudo obtener el men√∫.');
        return message.reply("‚ö†Ô∏è No se pudo obtener el men√∫.");
    }

    console.log('üì® Enviando men√∫ de bienvenida...');

    // Enviar mensaje de texto plano del men√∫
    message.reply(chatData.bienvenida + "\n\n" + chatData.menu);

    // Crear botones din√°micos
    const botones = chatData.botones.map(opcion => ({
        id: opcion.id,
        body: opcion.text
    }));

    const buttonMessage = new Buttons(
        'Selecciona una opci√≥n:',
        botones,
        'Men√∫ Principal',
        'Elige una opci√≥n'
    );

    await client.sendMessage(message.from, buttonMessage);
}

// üîπ Manejar la respuesta del usuario
async function handleMenuOptions(message) {
    const chatData = await getChatData();
    if (!chatData) {
        console.log('‚ö†Ô∏è No se pudo obtener las opciones del men√∫.');
        return message.reply("‚ö†Ô∏è No se pudo obtener las opciones del men√∫.");
    }

    const userOption = message.body.trim();

    if (chatData.respuestas[userOption]) {
        console.log(`‚úÖ Respondiendo a la opci√≥n ${userOption}: ${chatData.respuestas[userOption]}`);
        message.reply(chatData.respuestas[userOption]);
    } else {
        console.log('‚ö†Ô∏è Opci√≥n inv√°lida. Mostrando men√∫ nuevamente...');
        message.reply(chatData.error);
        await sendWelcomeMenu(message);
    }
}

client.initialize();
